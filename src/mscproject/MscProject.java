/*
 * Author: 1600558
 * Title: Hydrocarbon Production Data Management System
 * Purpose: MSC Final Project
 * Date: 18/05/2018
 */
package mscproject;

import au.com.bytecode.opencsv.CSVReader;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author 1600558
 */
public class MscProject extends javax.swing.JFrame {

    private JTree tree;
    private DefaultMutableTreeNode root;
    private JTable table;
    public static int columnIndex;
    public static double result;
    public String fileName;

    /**
     * Creates new form index
     */
    public MscProject() {

        initComponents();
        setExtendedState(MscProject.MAXIMIZED_BOTH);

        /**
         * Code for creating a new directory for file management*
         */
        File dirCreator = new File(
                "C:\\Users\\laptop\\Desktop\\Petroleum Production Data Files");
        if (!dirCreator.exists()) {
            if (dirCreator.mkdir()) {
                System.out.println(
                        "New directory created! \n"
                        + "C:\\Users\\laptop\\Desktop"
                        + "\\Petroleum Production Data Files");
            }
        }

        root = new DefaultMutableTreeNode("CSV Files");
        tree = new JTree(root);
        jTreePanel.setLayout(new GridLayout(1, 1));
        jTreePanel.add(tree);

        tree.addTreeSelectionListener((TreeSelectionEvent e) -> {
            TreePath tp = e.getPath();
            int s = tp.getPathCount();
            switch (s) {
                case 1:
                case 3:
                    break;
                default:
                    fileName = tp.getPathComponent(s - 1).toString();
                    tablePanel.setVisible(true);
                    System.out.println("Selected CSV file: " + fileName);
                    writeCSVToTable(fileName);

                    File file = new File(fileName);
                     {
                        try {
                            Scanner inputStream = new Scanner(file);
                            while (inputStream.hasNext()) {
                                String data = inputStream.next();
                                System.out.println(data);
                            }
                            inputStream.close();

                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(MscProject.class.getName()).log(
                                    Level.SEVERE, null, ex);
                        }
                    }
                    break;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        buttonGroup = new javax.swing.ButtonGroup();
        graphPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        titleTextField = new javax.swing.JTextField();
        yComboBox = new javax.swing.JComboBox<>();
        xComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        lineRadioButton = new javax.swing.JRadioButton();
        SPRadioButton = new javax.swing.JRadioButton();
        plotButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        retainCheckBox = new javax.swing.JCheckBox();
        jTreePanel = new javax.swing.JPanel();
        myTabs = new javax.swing.JTabbedPane();
        tableTab = new javax.swing.JPanel();
        tablePanel = new javax.swing.JPanel();
        resetButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        graphButton = new javax.swing.JButton();
        dispScroll = new javax.swing.JScrollPane();
        sortRB = new javax.swing.JRadioButton();
        sumRB = new javax.swing.JRadioButton();
        maxRB = new javax.swing.JRadioButton();
        avgRB = new javax.swing.JRadioButton();
        sdRB = new javax.swing.JRadioButton();
        minRB = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        fcastTab = new javax.swing.JPanel();
        fcastPanel = new javax.swing.JPanel();
        propertiesPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        fcastDPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        fRateTextField = new javax.swing.JTextField();
        predictButton = new javax.swing.JButton();
        timeTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        dRateTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        graphDPanel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rateComboBox = new javax.swing.JComboBox<>();
        timeComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        dCurveComboBox = new javax.swing.JComboBox<>();
        loadButton = new javax.swing.JButton();
        clrButton = new javax.swing.JButton();
        fPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newCSV = new javax.swing.JMenuItem();
        csvCreator = new javax.swing.JMenuItem();
        saveGraphItem = new javax.swing.JMenuItem();
        helpMenuItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jCheckBox1.setText("jCheckBox1");

        jScrollPane1.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ProdManager 1.0");
        setPreferredSize(new java.awt.Dimension(1366, 699));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setText("Title:");

        jLabel3.setText("Y Axis:");

        jLabel4.setText("X Axis:");

        titleTextField.setText("ylabel against xlabel");
        titleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleTextFieldActionPerformed(evt);
            }
        });

        yComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Table columns" }));
        yComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yComboBoxActionPerformed(evt);
            }
        });

        xComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Table columns" }));
        xComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Plot Type:");

        buttonGroup1.add(lineRadioButton);
        lineRadioButton.setText("Line Plot");

        buttonGroup1.add(SPRadioButton);
        SPRadioButton.setText("Scatter Plot");
        SPRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SPRadioButtonActionPerformed(evt);
            }
        });

        plotButton.setText("Plot Graph");
        plotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });

        returnButton.setText("Return to Table Tab ");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        retainCheckBox.setText("retain?");

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(graphPanelLayout.createSequentialGroup()
                        .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(60, 60, 60)
                        .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(yComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(titleTextField)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, graphPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(xComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 956, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(graphPanelLayout.createSequentialGroup()
                        .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(graphPanelLayout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addComponent(lineRadioButton)
                                .addGap(18, 18, 18)
                                .addComponent(SPRadioButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(retainCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(returnButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphPanelLayout.createSequentialGroup()
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(titleTextField)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(9, 9, 9)
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lineRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SPRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(plotButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(retainCheckBox))
                    .addComponent(returnButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jTreePanelLayout = new javax.swing.GroupLayout(jTreePanel);
        jTreePanel.setLayout(jTreePanelLayout);
        jTreePanelLayout.setHorizontalGroup(
            jTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        jTreePanelLayout.setVerticalGroup(
            jTreePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close Tabs");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        graphButton.setText("Graph Plotter");
        graphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphButtonActionPerformed(evt);
            }
        });

        buttonGroup.add(sortRB);
        sortRB.setText("Sort Data");
        sortRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortRBActionPerformed(evt);
            }
        });

        buttonGroup.add(sumRB);
        sumRB.setText("Sum");
        sumRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumRBActionPerformed(evt);
            }
        });

        buttonGroup.add(maxRB);
        maxRB.setText("Maximum Value");
        maxRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxRBActionPerformed(evt);
            }
        });

        buttonGroup.add(avgRB);
        avgRB.setText("Average");
        avgRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgRBActionPerformed(evt);
            }
        });

        buttonGroup.add(sdRB);
        sdRB.setText("Standard Deviation");
        sdRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sdRBActionPerformed(evt);
            }
        });

        buttonGroup.add(minRB);
        minRB.setText("Minimum Value");
        minRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minRBActionPerformed(evt);
            }
        });

        jLabel1.setText("Table Operations:");

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sortRB)
                    .addComponent(sumRB, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxRB)
                    .addComponent(avgRB))
                .addGap(40, 40, 40)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minRB)
                    .addComponent(sdRB))
                .addGap(226, 226, 226)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(graphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61))
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addComponent(dispScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 1061, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addComponent(dispScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sortRB)
                            .addComponent(sdRB)
                            .addComponent(avgRB)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxRB)
                            .addComponent(minRB)
                            .addComponent(sumRB)))
                    .addGroup(tablePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(closeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resetButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(graphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tableTabLayout = new javax.swing.GroupLayout(tableTab);
        tableTab.setLayout(tableTabLayout);
        tableTabLayout.setHorizontalGroup(
            tableTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        tableTabLayout.setVerticalGroup(
            tableTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        myTabs.addTab("Table Display", tableTab);

        jLabel7.setText("PROPERTIES");

        jLabel14.setText("Flowrate:");

        fRateTextField.setEnabled(false);

        predictButton.setText("Predict");
        predictButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        predictButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictButtonActionPerformed(evt);
            }
        });

        timeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeTextFieldActionPerformed(evt);
            }
        });

        jLabel17.setText("Norminal Decline Rate:");

        jLabel18.setText("Forecast Data");

        dRateTextField.setEnabled(false);

        jLabel13.setText("Time of Interest:");

        javax.swing.GroupLayout fcastDPanelLayout = new javax.swing.GroupLayout(fcastDPanel);
        fcastDPanel.setLayout(fcastDPanelLayout);
        fcastDPanelLayout.setHorizontalGroup(
            fcastDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fcastDPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fcastDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fcastDPanelLayout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(fcastDPanelLayout.createSequentialGroup()
                        .addGroup(fcastDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fcastDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                            .addComponent(dRateTextField)
                            .addComponent(fRateTextField))))
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fcastDPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(predictButton)
                .addContainerGap())
        );
        fcastDPanelLayout.setVerticalGroup(
            fcastDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fcastDPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fcastDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dRateTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fcastDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(timeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(predictButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fcastDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(fRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jLabel16.setText("Graph Data");

        jLabel8.setText("Flowrate Data:");

        rateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Flowrate Column" }));
        rateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rateComboBoxActionPerformed(evt);
            }
        });

        timeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Time Column" }));

        jLabel9.setText("Time Data:");

        jLabel10.setText("Decline Curve:");

        dCurveComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Exponential", "Harmonic", "Hyperbolic" }));

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        clrButton.setText("Clear");
        clrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clrButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout graphDPanelLayout = new javax.swing.GroupLayout(graphDPanel);
        graphDPanel.setLayout(graphDPanelLayout);
        graphDPanelLayout.setHorizontalGroup(
            graphDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphDPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(graphDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, graphDPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clrButton))
                    .addGroup(graphDPanelLayout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(graphDPanelLayout.createSequentialGroup()
                        .addGroup(graphDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(graphDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dCurveComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(timeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rateComboBox, 0, 141, Short.MAX_VALUE))))
                .addContainerGap())
        );
        graphDPanelLayout.setVerticalGroup(
            graphDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(graphDPanelLayout.createSequentialGroup()
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(graphDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(rateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(graphDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(graphDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dCurveComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(graphDPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton)
                    .addComponent(clrButton)))
        );

        javax.swing.GroupLayout propertiesPanelLayout = new javax.swing.GroupLayout(propertiesPanel);
        propertiesPanel.setLayout(propertiesPanelLayout);
        propertiesPanelLayout.setHorizontalGroup(
            propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesPanelLayout.createSequentialGroup()
                .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fcastDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(propertiesPanelLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jLabel7))
                    .addComponent(graphDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        propertiesPanelLayout.setVerticalGroup(
            propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(graphDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fcastDPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(162, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout fPanelLayout = new javax.swing.GroupLayout(fPanel);
        fPanel.setLayout(fPanelLayout);
        fPanelLayout.setHorizontalGroup(
            fPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 765, Short.MAX_VALUE)
        );
        fPanelLayout.setVerticalGroup(
            fPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout fcastPanelLayout = new javax.swing.GroupLayout(fcastPanel);
        fcastPanel.setLayout(fcastPanelLayout);
        fcastPanelLayout.setHorizontalGroup(
            fcastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fcastPanelLayout.createSequentialGroup()
                .addComponent(fPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertiesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(40, 40, 40))
        );
        fcastPanelLayout.setVerticalGroup(
            fcastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fcastPanelLayout.createSequentialGroup()
                .addGroup(fcastPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(propertiesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout fcastTabLayout = new javax.swing.GroupLayout(fcastTab);
        fcastTab.setLayout(fcastTabLayout);
        fcastTabLayout.setHorizontalGroup(
            fcastTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fcastPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        fcastTabLayout.setVerticalGroup(
            fcastTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fcastTabLayout.createSequentialGroup()
                .addComponent(fcastPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        myTabs.addTab("Production Forecast", fcastTab);

        jMenu1.setText("File");

        newCSV.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK));
        newCSV.setText("Open CSV");
        newCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCSVActionPerformed(evt);
            }
        });
        jMenu1.add(newCSV);

        csvCreator.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        csvCreator.setText("Save Displayed Table");
        csvCreator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvCreatorActionPerformed(evt);
            }
        });
        jMenu1.add(csvCreator);

        saveGraphItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        saveGraphItem.setText("Save Displayed Graph");
        saveGraphItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGraphItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveGraphItem);

        helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(helpMenuItem);

        exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTreePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(15, Short.MAX_VALUE))
                    .addComponent(myTabs)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTreePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(myTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void titleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleTextFieldActionPerformed

    private void SPRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SPRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SPRadioButtonActionPerformed

    private void plotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotButtonActionPerformed
        /**
         * Code for creating and plotting a graph*
         */
        int xAxis = xComboBox.getSelectedIndex();
        int yAxis = yComboBox.getSelectedIndex();
        JFreeChart chart = getChart(xAxis, yAxis);
        ChartFrame frame = new ChartFrame("XY graph using JFreeChart", chart);
        if (!(retainCheckBox.isSelected())) {
            frame.pack();
            frame.setVisible(true);
        } else {
            JPanel newTab = new JPanel();
            String title = titleTextField.getText();
            if (myTabs.indexOfTab(title) >= 0) {
                int ans = JOptionPane.showConfirmDialog(null,
                        "Graph:" + title + " already exists. OK to overwrite?");
                if (ans == JOptionPane.YES_OPTION) {
                    myTabs.remove(myTabs.indexOfTab(title));
                } else {
                    JOptionPane.showMessageDialog(null,
                            "Error in plotting requested graph!");
                }
            }
            tabDisplay(frame, newTab, title);
        }
    }//GEN-LAST:event_plotButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        myTabs.setSelectedIndex(0);
    }//GEN-LAST:event_returnButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        /**
         * Code for customising initial display when the program is run*
         */
        tablePanel.setVisible(false);
        graphPanel.setVisible(false);
        csvCreator.setEnabled(false);
        saveGraphItem.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void newCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCSVActionPerformed
        /**
         * Code for loading a new CSV file onto the program*
         */
        JFileChooser jc = new JFileChooser(""
                + "C:\\Users\\laptop\\Desktop"
                + "\\Petroleum Production Data Files\\");
        jc.setDialogTitle("Navigate to csv directory");
        jc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = jc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = jc.getSelectedFile().getAbsolutePath();
            String fname = jc.getSelectedFile().getName();
            byte[] b = new byte[1024];

            int rbyte = 0;
            try {
                FileInputStream fis = new FileInputStream(new File(path));
                FileOutputStream fos = new FileOutputStream(new File(fname));
                while ((rbyte = fis.read(b)) != -1) {
                    fos.write(b);
                }
                addFileToTree(fname);
            } catch (IOException ex) {
                Logger.getLogger(MscProject.class.getName()).log(
                        Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_newCSVActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void graphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphButtonActionPerformed
        ArrayList<String> axisList = getColumnHeaders();
        titleTextField.setText("Graph Title");
        yComboBox.setModel(new DefaultComboBoxModel(axisList.toArray()));
        xComboBox.setModel(new DefaultComboBoxModel(axisList.toArray()));

        SPRadioButton.setSelected(true);
        graphPanel.setVisible(true);

    }//GEN-LAST:event_graphButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        /**
         * Code for removing all newly created tabs and resetting the tabs*
         */
        myTabs.setVisible(false);
        graphPanel.setVisible(false);
        csvCreator.setEnabled(false);

        for (int nTabs = myTabs.getTabCount() - 1; nTabs >= 2; nTabs--) {
            myTabs.remove(nTabs);
            saveGraphItem.setEnabled(false);
        }
    }//GEN-LAST:event_closeButtonActionPerformed


    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        writeCSVToTable(fileName);
        buttonGroup.clearSelection();
//        resultsField.setText("");
    }//GEN-LAST:event_resetButtonActionPerformed

    private void csvCreatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvCreatorActionPerformed
        /**
         * Code for saving an edited CSV file to the default file directory*
         */
        String csvName = null;
        try {
            myCSVExporter exp = new myCSVExporter();
            do {
                csvName = JOptionPane.showInputDialog(
                        "Enter the new CSV filename");
            } while (csvName.isEmpty());
//            exp.exportTable(table, new File("\\\\nas-csdm.rgu.ac.uk\\csdm-H\\Students\\16\\1600558\\Desktop\\myCSVs\\" + csvName + ".csv"));
            exp.exportTable(table, new File("C:\\Users\\laptop\\Desktop"
                    + "\\Petroleum Production Data Files\\" + csvName + ".csv"));
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null,
                    "Problem writing to file: " + csvName + ".csv"
                    + "\nError message: " + e.getMessage());
        }
    }//GEN-LAST:event_csvCreatorActionPerformed

    private void yComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yComboBoxActionPerformed

    private void saveGraphItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGraphItemActionPerformed
        /**
         * Code for saving a pre-loaded graph to the default file directory*
         */
        int xAxis = xComboBox.getSelectedIndex();
        int yAxis = yComboBox.getSelectedIndex();
        JFreeChart chart = getChart(xAxis, yAxis);
        String chartName = null;
        try {
            do {
                chartName = JOptionPane.showInputDialog(
                        "Enter the new filename");
            } while (chartName.isEmpty());

            ChartUtilities.saveChartAsJPEG(
                    new File("C:\\Users\\laptop\\Desktop"
                            + "\\Petroleum Production Data Files\\"
                            + chartName + ".jpeg"), chart, 1200, 800);
            JOptionPane.showMessageDialog(null, "New file: " + chartName
                    + ".jpeg" + " \nsaved succesfully!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Problem saving JPG file"
                    + "\nError message: " + e.getMessage());
        }
    }//GEN-LAST:event_saveGraphItemActionPerformed

    private void timeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeTextFieldActionPerformed

    private void predictButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictButtonActionPerformed
        /**
         * Code for forecasting flowrate using Arp's Decline curve equation*
         */
        fRateTextField.setText("");
        double tOfInterest, qPredict, qInitial, dExp, valueOfInterest;
        ArrayList<Double> qValues = getColumnItems(
                rateComboBox.getSelectedIndex());
        qInitial = qValues.get(0);
        dExp = Double.parseDouble(dRateTextField.getText());
        if (timeTextField.getText() == "") {
            JOptionPane.showMessageDialog(null,
                    "Enter the time period of interest first!");
        } else {
            try {
//                tOfInterest = Double.parseDouble(timeTextField.getText());
                ArrayList<Double> tValues = getColumnItems(
                        timeComboBox.getSelectedIndex());
                valueOfInterest = Double.parseDouble(timeTextField.getText());
                tOfInterest = (valueOfInterest - tValues.get(0))
                        / (tValues.get(1) - tValues.get(0));
                qPredict = qInitial * Math.exp(-dExp * tOfInterest);
                fRateTextField.setText("" + qPredict);
            } catch (Exception e) {
                System.out.println("Error: " + e);
            }
        }
    }//GEN-LAST:event_predictButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        /**
         * Code for loading data to be used for forecasting operation*
         */
        predictButton.setEnabled(true);
        timeTextField.setText(null);
        fRateTextField.setText(null);

        int xAxis = timeComboBox.getSelectedIndex();
        int yAxis = rateComboBox.getSelectedIndex();
        String title = "Graphical Plot For Forecasting Flowrate";
        ArrayList<Double> xList = getColumnItems(xAxis);
        ArrayList<Double> yList = getColumnItems(yAxis);
        XYSeries series = new XYSeries(table.getColumnName(yAxis)
                + " against " + table.getColumnName(xAxis));
        for (int i = 0; i < xList.size(); i++) {
            series.add(xList.get(i), yList.get(i));
        }
        XYSeriesCollection data = new XYSeriesCollection();
        data.addSeries(series);
        JFreeChart fcastChart = ChartFactory.createXYLineChart(
                title, table.getColumnName(xAxis), table.getColumnName(yAxis),
                data);
        ChartFrame fcastFrame = new ChartFrame(
                "XY graph using JFreeChart", fcastChart);
        //Getting the graph to show within the forcasting jpanel
        JPanel c = new JPanel();
        fPanel.removeAll();
        c.add(fcastFrame.getChartPanel());
        c.setSize(fPanel.getWidth(), fPanel.getHeight());
        fPanel.add(c);
        fPanel.validate();
        if (dCurveComboBox.getSelectedItem() == "Exponential") {
            dRateTextField.setText("" + getExpRate(yList, xList, data));
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void rateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rateComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rateComboBoxActionPerformed

    private void clrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clrButtonActionPerformed
        fPanel.removeAll();
        fPanel.validate();

        dRateTextField.setText(null);
        timeTextField.setText(null);
        fRateTextField.setText(null);
        predictButton.setEnabled(false);
    }//GEN-LAST:event_clrButtonActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentResized

    private void xComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xComboBoxActionPerformed

    /**
     * Event handlers for performing table operations*
     */
    private void maxRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxRBActionPerformed
        writeCSVToTable(fileName);
        table.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Get the right column based on MouseEvent#getPoint()
                columnIndex = table.columnAtPoint(e.getPoint());
                result = getMax(columnIndex);
//                    resultsField.setText("" + result);
            }
        });
    }//GEN-LAST:event_maxRBActionPerformed

    private void sdRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sdRBActionPerformed
        table.setColumnSelectionAllowed(true);
        writeCSVToTable(fileName);
        table.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Get the right column based on MouseEvent#getPoint()
                columnIndex = table.columnAtPoint(e.getPoint());
                result = getSD(columnIndex);
//                    resultsField.setText("" + result);
            }
        });
    }//GEN-LAST:event_sdRBActionPerformed

    private void sortRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortRBActionPerformed
        writeCSVToTable(fileName);
        table.setAutoCreateRowSorter(true);
    }//GEN-LAST:event_sortRBActionPerformed

    private void sumRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumRBActionPerformed
        table.setColumnSelectionAllowed(true);
        writeCSVToTable(fileName);
        table.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Get the right column based on MouseEvent#getPoint()
                columnIndex = table.columnAtPoint(e.getPoint());
                result = getSum(columnIndex);
//                    resultsField.setText("" + result);
            }
        });
    }//GEN-LAST:event_sumRBActionPerformed

    private void avgRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgRBActionPerformed
        writeCSVToTable(fileName);
        table.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Get the right column based on MouseEvent#getPoint()
                columnIndex = table.columnAtPoint(e.getPoint());
                result = getAverage(columnIndex);
//                    resultsField.setText("" + result);
            }
        });
    }//GEN-LAST:event_avgRBActionPerformed

    private void minRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minRBActionPerformed
        writeCSVToTable(fileName);
        table.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Get the right column based on MouseEvent#getPoint()
                columnIndex = table.columnAtPoint(e.getPoint());
                result = getMin(columnIndex);
//                    resultsField.setText("" + result);
            }
        });
    }//GEN-LAST:event_minRBActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        String message = "Basic Functionalities \n"
                + "1.	To load a new CSV file:\n"
                + "Select “Open CSV” from the File menu and navigate to the location of the file."
                + "\n"
                + "2.	To save a displayed table\n"
                + "With the edited table currently on display, click “Save Displayed Table” from "
                + "\n"
                + "the File menu and specify a name for the new graph.\n"
                + "3.	To save a displayed graph\n"
                + "Click “Save Displayed Table” from the File menu and specify a name for the new"
                + "\n"
                + " graph.\n"
                + "4.	To perform a table operation\n"
                + "Select the operation and click on the header of the column of interest. The "
                + "\n"
                + "selection can be disabled by either selecting another "
                + "\n"
                + "operation or resetting the table data.\n"
                + "5.	To plot a graph\n"
                + "Select the CSV file of interest, click the Graph Plotter button and set up the"
                + "\n"
                + " graph details, then click “Plot Graph”. The graph can be "
                + "\n"
                + "displayed on a new tab by marking the “retain?” checkbox.\n"
                + "6.	To forecast flowrate value\n"
                + "Select the CSV file of interest, and set up the properties to be used for "
                + "\n"
                + "performing the forecast from the “Production Forecast” tab. "
                + "\n"
                + "Load the data, enter the desired time period and click "
                + "\n"
                + "“Predict” to calculate the matching flowrate.\n"
                + "7.	To close a “retained” graph\n"
                + "Click on the “X” button positioned next to the tab’s title.\n\n"
                + "Shortcuts\n"
                + "Open new CSV file: Alt+O\n"
                + "Save table to default file directory: Alt+T\n"
                + "Save graph to default file directory: Alt+G\n"
                + "Open the help file: Alt+H\n"
                + "Exit: Alt+E\n\n"
                + "Additional Notes\n"
                + "The default directory for files storage is \"C:\\Users\\laptop\\Desktop"
                + "\n"
                + "\\Petroleum Production Data Files\"";
        JOptionPane.showMessageDialog(myTabs, message, "HELP FILE", 1);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    /**
     * Method for retrieving a table's column headers*
     */
    private ArrayList<String> getColumnHeaders() {
        ArrayList<String> columnHeaders = new ArrayList<>();
        for (int i = 0; i < table.getColumnCount(); i++) {
            try {
                columnHeaders.add(table.getColumnName(i));
            } catch (Exception e) {
                System.out.println(e);
            }
        }
        return columnHeaders;
    }

    /**
     * Method for loading data to the forecast section*
     */
    private void populateForecast() {
        ArrayList<String> rateTimeList = getColumnHeaders();
        rateComboBox.setModel(new DefaultComboBoxModel(rateTimeList.toArray()));
        timeComboBox.setModel(new DefaultComboBoxModel(rateTimeList.toArray()));
    }

    /**
     * Method for calculating exponential decline rate and adding its Arp's
     * curve to plotted graph*
     */
    private Double getExpRate(ArrayList<Double> yList, ArrayList<Double> xList,
            XYSeriesCollection data) {
        double qi, qf, t, dExp;
        qi = yList.get(0);
        qf = yList.get(yList.size() - 1);
        t = xList.size() - 1;
        dExp = (Math.log(qi / qf) / t);

        ArrayList<Double> qPredict = new ArrayList<>();
        for (int i = 0; i < xList.size(); i++) {
            try {
                qPredict.add(yList.get(0) * Math.exp(-dExp * i));
            } catch (Exception e) {
                System.out.println("Error: " + e);
            }
        }
        System.out.println(qPredict);
        XYSeries fcastSeries = new XYSeries("q= qi*e^(-Dt)");
        for (int i = 0; i < xList.size(); i++) {
            fcastSeries.add(xList.get(0)
                    + (xList.get(1) - xList.get(0)) * i, qPredict.get(i));
        }
        System.out.println(fcastSeries);
        data.addSeries(fcastSeries);
        return dExp;
    }

    /**
     * Class for creating new CSV file from displayed table data*
     */
    public class myCSVExporter {

        public myCSVExporter() {
        }

        public void exportTable(JTable table, File file) throws IOException {
            TableModel model = table.getModel();

//            if (file.exists()) {
//                int ans = JOptionPane.showConfirmDialog(null,
//                        "File already exists. OK to overwrite?");
//                if (ans == JOptionPane.YES_OPTION) {
            FileWriter out = new FileWriter(file);

            for (int i = 0; i < model.getColumnCount(); i++) {
                if (i == model.getColumnCount() - 1) {
                    out.write(model.getColumnName(i));
                } else {
                    out.write(model.getColumnName(i) + ",");
                }
            }
            out.write("\n");
            for (int i = 0; i < model.getRowCount() - 1; i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    if (j == model.getColumnCount() - 1) {
                        out.write(model.getValueAt(i, j).toString());
                    } else {
                        out.write(model.getValueAt(i, j).toString() + ",");
                    }
                }
                out.write("\n");
            }
            out.close();
            System.out.println("write out to: " + file);
            JOptionPane.showMessageDialog(null, "New file: " + file.getName()
                    + " \ncreated succesfully!");
//                } else {
//                    JOptionPane.showMessageDialog(null,
//                            "Problem writing to file: " + file.getName());
//                }
//            }
        }
    }

    /**
     * Method for adding a new CSV file to the CSV file tree*
     */
    public void addFileToTree(String file) {
        DefaultMutableTreeNode dtm = new DefaultMutableTreeNode(file);
        DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
        DefaultMutableTreeNode rooted = (DefaultMutableTreeNode) tree.getModel().getRoot();
        model.insertNodeInto(dtm, rooted, rooted.getChildCount());
        //  tree.validate();
    }

    /**
     * Method for populating table with data from a CSV file*
     */
    private void writeCSVToTable(String file) {
        String[] colHead = null;
        List rows = new ArrayList();
        CSVReader reader = null;
        boolean flag = true;
        try {
            reader = new CSVReader(new FileReader(file));
            if (flag) {
                colHead = reader.readNext();
                System.out.println(colHead);
            }
            String[] line;
            while ((line = reader.readNext()) != null) {
                rows.add(line);
            }
//            if(!flag){
//            setDefaultHeader(line.length);
//            }
            displayTable(rows, colHead);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Method for displaying the table*
     */
    private void displayTable(List rows, String[] colHead) {
        String[][] columns = new String[rows.size()][colHead.length];
        for (int s = 0; s < rows.size() - 1; s++) {
            columns[s] = (String[]) rows.get(s);
        }

        table = new JTable(columns, colHead) {
            //Method to make the results row uneditable
            @Override
            public boolean isCellEditable(int row, int column) {
                if (row == table.getModel().getRowCount() - 1) {
                    return false;
                } else {
                    return true;
                }
            }
        };

        table.setValueAt("♦RESULTS", table.getModel().getRowCount() - 1, 0);
        dispScroll.add(table);
        dispScroll.setViewportView(table);
        dispScroll.validate();

        populateForecast();
        csvCreator.setEnabled(true);
        myTabs.setSelectedIndex(0);
        myTabs.setVisible(true);
        graphPanel.setVisible(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MscProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MscProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MscProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MscProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MscProject().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton SPRadioButton;
    private javax.swing.JRadioButton avgRB;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton clrButton;
    private javax.swing.JMenuItem csvCreator;
    private javax.swing.JComboBox<String> dCurveComboBox;
    private javax.swing.JTextField dRateTextField;
    private javax.swing.JScrollPane dispScroll;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JPanel fPanel;
    private javax.swing.JTextField fRateTextField;
    private javax.swing.JPanel fcastDPanel;
    private javax.swing.JPanel fcastPanel;
    private javax.swing.JPanel fcastTab;
    private javax.swing.JButton graphButton;
    private javax.swing.JPanel graphDPanel;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTree jTree1;
    private javax.swing.JPanel jTreePanel;
    private javax.swing.JRadioButton lineRadioButton;
    private javax.swing.JButton loadButton;
    private javax.swing.JRadioButton maxRB;
    private javax.swing.JRadioButton minRB;
    private javax.swing.JTabbedPane myTabs;
    private javax.swing.JMenuItem newCSV;
    private javax.swing.JButton plotButton;
    private javax.swing.JButton predictButton;
    private javax.swing.JPanel propertiesPanel;
    private javax.swing.JComboBox<String> rateComboBox;
    private javax.swing.JButton resetButton;
    private javax.swing.JCheckBox retainCheckBox;
    private javax.swing.JButton returnButton;
    private javax.swing.JMenuItem saveGraphItem;
    private javax.swing.JRadioButton sdRB;
    private javax.swing.JRadioButton sortRB;
    private javax.swing.JRadioButton sumRB;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JPanel tableTab;
    private javax.swing.JComboBox<String> timeComboBox;
    private javax.swing.JTextField timeTextField;
    private javax.swing.JTextField titleTextField;
    private javax.swing.JComboBox<String> xComboBox;
    private javax.swing.JComboBox<String> yComboBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Method for calculating the sum of data in a specified column*
     */
    private double getSum(int choice) {
        int rowsCount = table.getRowCount();
        double sum = 0.0;
        for (int i = 0; i < rowsCount - 1; i++) {
            try {
                sum += Double.parseDouble(
                        table.getValueAt(i, choice).toString());
            } catch (NumberFormatException e) {
                System.out.println(e);
            }
        }
        table.setValueAt("Sum", table.getModel().getRowCount() - 1, 0);
        table.setValueAt("" + sum, table.getModel().getRowCount() - 1, choice);
        return sum;
    }

    /**
     * Method for calculating the average of data in a specified column*
     */
    private double getAverage(int choice) {
        double sum = getSum(choice);
        int number = table.getRowCount() - 1;
        double average = sum / number;
        table.setValueAt("Average", table.getModel().getRowCount() - 1, 0);
        table.setValueAt(""
                + average, table.getModel().getRowCount() - 1, choice);
        return average;
    }

    /**
     * Method for calculating the maximum value of data in a specified column*
     */
    private double getMax(int choice) {
        double maxValue = Collections.max(getColumnItems(choice));
        table.setValueAt("Maximun Value", table.getModel().getRowCount() - 1, 0);
        table.setValueAt(""
                + maxValue, table.getModel().getRowCount() - 1, choice);
        return maxValue;
    }

    /**
     * Method for calculating the minimum value of data in a specified column*
     */
    private double getMin(int choice) {
        double minValue = Collections.min(getColumnItems(choice));
        table.setValueAt("Minimun Value", table.getModel().getRowCount() - 1, 0);
        table.setValueAt(""
                + minValue, table.getModel().getRowCount() - 1, choice);
        return minValue;
    }

    /**
     * Method for calculating the standard deviation of data in a column*
     */
    private double getSD(int choice) {
        double SD, mean, numerator = 0;
        mean = getAverage(choice);
        ArrayList<Double> myList = getColumnItems(choice);
        for (double x : myList) {
            numerator += Math.pow(x - mean, 2);
        }
        int number = table.getRowCount() - 1;
        SD = Math.sqrt(numerator / number);
        table.setValueAt(
                "Standard Deviation", table.getModel().getRowCount() - 1, 0);
        table.setValueAt("" + SD, table.getModel().getRowCount() - 1, choice);
        return SD;
    }

    /**
     * Method for retrieving the data values in a specified column*
     */
    private ArrayList<Double> getColumnItems(int choice) {
        ArrayList<Double> myList = new ArrayList<>();
        for (int i = 0; i < table.getRowCount() - 1; i++) {
            try {
                myList.add(Double.parseDouble(
                        table.getValueAt(i, choice).toString()));
            } catch (NumberFormatException e) {
                System.out.println(e);
            }
        }
        return myList;
    }

    /**
     * Method for creating a chart to be used for graph-plotting*
     */
    public JFreeChart getChart(int xAxis, int yAxis) {
        JFreeChart chart;
        ArrayList<Double> xList = getColumnItems(xAxis);
        ArrayList<Double> yList = getColumnItems(yAxis);
        XYSeries series = new XYSeries(table.getColumnName(yAxis)
                + " against " + table.getColumnName(xAxis));
        for (int i = 0; i < xList.size(); i++) {
            series.add(xList.get(i), yList.get(i));
        }
        System.out.println(series.getItems());
        XYSeriesCollection data = new XYSeriesCollection();
        data.addSeries(series);
        if (lineRadioButton.isSelected()) {
            //Lineplot
            chart = ChartFactory.createXYLineChart(
                    titleTextField.getText(), table.getColumnName(xAxis),
                    table.getColumnName(yAxis), data);
        } else {
            //Scatterplot
            chart = ChartFactory.createScatterPlot(
                    titleTextField.getText(), table.getColumnName(xAxis),
                    table.getColumnName(yAxis), data);
        }
        return chart;
    }

    /**
     * Method for plotting graph with a chart*
     */
    private void tabDisplay(ChartFrame frame, JPanel newTab, String title) {
        myTabs.addTab(title, newTab);
        myTabs.setSelectedIndex(myTabs.getTabCount() - 1);
        newTab.add(frame.getChartPanel());

        JPanel pnlTab = new JPanel(new GridBagLayout());
        pnlTab.setOpaque(false);
        JLabel lblTitle = new JLabel(title);
        JButton btnClose = new JButton("X");
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1;
        pnlTab.add(lblTitle, gbc);
        gbc.gridx++;
        gbc.weightx = 0;
        pnlTab.add(btnClose, gbc);

        int index = myTabs.indexOfTab(title);
        myTabs.setTabComponentAt(index, pnlTab);

        btnClose.addMouseListener(new MouseAdapter() {
            //Method to customise functionality of the newly created button
            @Override
            public void mouseClicked(MouseEvent e) {
                Component selected = myTabs.getComponentAt(
                        myTabs.indexOfTab(title));
                if (selected != null) {
                    myTabs.remove(selected);
                }
            }
        });
        saveGraphItem.setEnabled(true);
    }
}
